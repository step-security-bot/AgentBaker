<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$cseFormattedStartTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( {{ GetSshPublicKeysPowerShell }} )

## Certificates generated by aks-engine
$global:CACertificate = "{{GetParameter "caCertificate"}}"
$global:AgentCertificate = "{{GetParameter "clientCertificate"}}"

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "{{GetParameter "kubeBinariesSASURL"}}"
$global:WindowsKubeBinariesURL = "{{GetParameter "windowsKubeBinariesURL"}}"
$global:KubeBinariesVersion = "{{GetParameter "kubeBinariesVersion"}}"
$global:ContainerdUrl = "{{GetParameter "windowsContainerdURL"}}"
$global:ContainerdSdnPluginUrl = "{{GetParameter "windowsSdnPluginURL"}}"

## Docker Version
$global:DockerVersion = "{{GetParameter "windowsDockerVersion"}}"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "{{GetParameter "defaultContainerdWindowsSandboxIsolation"}}"
$global:ContainerdWindowsRuntimeHandlers = "{{GetParameter "containerdWindowsRuntimeHandlers"}}"

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "{{GetParameter "windowsTelemetryGUID"}}"
{{if eq GetIdentitySystem "adfs"}}
$global:TenantId = "adfs"
{{else}}
$global:TenantId = "{{GetVariable "tenantID"}}"
{{end}}
$global:SubscriptionId = "{{GetVariable "subscriptionId"}}"
$global:ResourceGroup = "{{GetVariable "resourceGroup"}}"
$global:VmType = "{{GetVariable "vmType"}}"
$global:SubnetName = "{{GetVariable "subnetName"}}"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "{{GetVariable "nsgName"}}"
$global:VNetName = "{{GetVariable "virtualNetworkName"}}"
$global:RouteTableName = "{{GetVariable "routeTableName"}}"
$global:PrimaryAvailabilitySetName = "{{GetVariable "primaryAvailabilitySetName"}}"
$global:PrimaryScaleSetName = "{{GetVariable "primaryScaleSetName"}}"

$global:KubeClusterCIDR = "{{GetParameter "kubeClusterCidr"}}"
$global:KubeServiceCIDR = "{{GetParameter "kubeServiceCidr"}}"
$global:VNetCIDR = "{{GetParameter "vnetCidr"}}"
{{if IsKubernetesVersionGe "1.16.0"}}
$global:KubeletNodeLabels = "{{GetAgentKubernetesLabels . }}"
{{else}}
$global:KubeletNodeLabels = "{{GetAgentKubernetesLabelsDeprecated . }}"
{{end}}
$global:KubeletConfigArgs = @( {{GetKubeletConfigKeyValsPsh}} )
$global:KubeproxyConfigArgs = @( {{GetKubeproxyConfigKeyValsPsh}} )

$global:KubeproxyFeatureGates = @( {{GetKubeProxyFeatureGatesPsh}} )

$global:UseManagedIdentityExtension = "{{GetVariable "useManagedIdentityExtension"}}"
$global:UseInstanceMetadata = "{{GetVariable "useInstanceMetadata"}}"

$global:LoadBalancerSku = "{{GetVariable "loadBalancerSku"}}"
$global:ExcludeMasterFromStandardLB = "{{GetVariable "excludeMasterFromStandardLB"}}"

$global:PrivateEgressProxyAddress = "{{GetPrivateEgressProxyAddress}}"

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "{{GetParameter "networkPolicy"}}" # BUG: unused
$global:NetworkPlugin = "{{GetParameter "networkPlugin"}}"
$global:VNetCNIPluginsURL = "{{GetParameter "vnetCniWindowsPluginsURL"}}"
$global:IsDualStackEnabled = {{if IsIPv6DualStackFeatureEnabled}}$true{{else}}$false{{end}}
$global:IsAzureCNIOverlayEnabled = {{if IsAzureCNIOverlayFeatureEnabled}}$true{{else}}$false{{end}}

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("{{GetVariable "windowsEnableCSIProxy" }}");
$global:CsiProxyUrl = "{{GetVariable "windowsCSIProxyURL" }}";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("{{ EnableHostsConfigAgent }}");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "{{GetVariable "windowsCSEScriptsPackageURL" }}";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "{{GetVariable "windowsGpuDriverURL" }}";

# PauseImage
$global:WindowsPauseImageURL = "{{GetVariable "windowsPauseImageURL" }}";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("{{GetVariable "alwaysPullWindowsPauseImage" }}");

# Calico
$global:WindowsCalicoPackageURL = "{{GetVariable "windowsCalicoPackageURL" }}";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("{{GetVariable "configGPUDriverIfNeeded" }}");

# GMSA
$global:WindowsGmsaPackageUrl = "{{GetVariable "windowsGmsaPackageUrl" }}";

# TLS Bootstrap Token
$global:TLSBootstrapToken = "{{GetTLSBootstrapTokenForKubeConfig}}"

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("{{GetVariable "isDisableWindowsOutboundNat" }}");

# Base64 representation of ZIP archive
$zippedFiles = "{{ GetKubernetesWindowsAgentFunctions }}"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("{{ FIPSEnabled }}")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("{{GetHnsRemediatorIntervalInMinutes}}");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("{{GetLogGeneratorIntervalInMinutes}}");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.37.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -EventMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl"  -IsClearTaskName $true

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("{{ WindowsSSHEnabled }}")

    if ( $sshEnabled ) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -EventMessage "Start to install OpenSSH"
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -EventMessage "Start to apply telemetry data setting. WindowsTelemetryGUID: $global:WindowsTelemetryGUID"
    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -EventMessage "Start to resize os drive if possible"
    Write-Log "Resize os drive if possible"
    Resize-OSDrive
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -EventMessage "Start to initialize data disks"
    Write-Log "Initialize data disks"
    Initialize-DataDisks
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -EventMessage "Start to create required data directories as needed"
    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -EventMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -EventMessage "Start to write KubeCluster Config. WindowsPauseImageURL: $global:WindowsPauseImageURL"
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -IsClearTaskName $true    

    Write-Log "Download kubelet binaries and unzip"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -EventMessage "Start to download kubelet binaries and unzip. KubeBinariesPackageSASURL: $global:KubeBinariesPackageSASURL"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -IsClearTaskName $true

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.OverwriteKubeBinaries" -EventMessage "Start to overwrite kube node binaries"
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.OverwirteKubeBinaries" -IsClearTaskName $true
    }

    
    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -EventMessage "Start to install ContainerD based on kubernetes version. ContainerdUrl: $global:ContainerdUrl, KubernetesVersion: $global:KubeBinariesVersion"
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -EventMessage "Start to retag images for Azure China Cloud"
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -IsClearTaskName $true

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -EventMessage "Start to write Azure Cloud Provider Config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment {{if IsAKSCustomCloud}}"AzureStackCloud"{{else}}$TargetEnvironment{{end}} 

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -IsClearTaskName $true

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    {{if IsAKSCustomCloud}}
    $azureStackConfigFile = [io.path]::Combine($global:KubeDir, "azurestackcloud.json")
    $envJSON = "{{ GetBase64EncodedEnvironmentJSON }}"
    [io.file]::WriteAllBytes($azureStackConfigFile, [System.Convert]::FromBase64String($envJSON))

    Get-CACertificates
    {{end}}

    Write-Log "Write ca root"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteCACert" -EventMessage "Start to write CA certifacte"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteCACert" -IsClearTaskName $true

    if ($global:EnableCsiProxy) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -EventMessage "Start Csi proxy service. CsiProxyUrl: $global:CsiProxyUrl"
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -IsClearTaskName $true
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -EventMessage "Start to write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -IsClearTaskName $true

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -EventMessage "Start to write kube config"
    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -IsClearTaskName $true

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -EventMessage "Start hosts config agent"
        New-HostsConfigService
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -IsClearTaskName $true
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Logs-To-Start-Event "ASK.WindowsCSE.GetAndImportHNSModule" -EventMessage "Start to get and import hns module. NetworkPlugin: $global:NetworkPlugin"
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    Logs-To-End-Event "AKS.WindowsCSE.GetAndImportHNSModule" -IsClearTaskName $true

    Write-Log "Installing Azure VNet plugins"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -EventMessage "Start to install Azure VNet plugins. VnetCNIPluginsURL: $global:VNetCNIPluginsURL"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -EventMessage "Start to set Azure CNI config. IsDualStackEnabled: $global:IsDualStackEnabled, IsAzureCNIOverlayEnabled: $global:IsAzureCNIOverlayEnabled, IsDisableWindowsOutboundNat: $global:IsDisableWindowsOutboundNat"
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -IsClearTaskName $true

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -EventMessage "Start to generate Azure Stack CNI config"
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "{{ GetIdentitySystem }}"
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -EventMessage "Start to create new external hns network"
    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -EventMessage "Start to install kubernetes services"
    Install-KubernetesServices `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -IsClearTaskName $true

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetExplorer" -EventMessage "Start to disable Internet Explorer compat mode and set homepage"
    Set-Explorer
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetExplorer" -IsClearTaskName $true

    Write-Log "Adjust pagefile size"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -EventMessage "Start to adjust pagefile size"
    Adjust-PageFileSize
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -IsClearTaskName $true

    Write-Log "Start preProvisioning script"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -EventMessage "Start preProvisioning script"
    PREPROVISION_EXTENSION
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -IsClearTaskName $true

    Write-Log "Update service failure actions"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -EventMessage "Staret to update service failure actions"
    Update-ServiceFailureActions
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -EventMessage "Start to adjust dynamic port range"
    Adjust-DynamicPortRange
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -EventMessage "Start to register logs cleanup script task"
    Register-LogsCleanupScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -EventMessage "Start to register node reset script task. HNSRemediatorIntervalInMinutes: $global:HNSRemediatorIntervalInMinutes"
    Register-NodeResetScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -EventMessage "Start to update defender preferences"
    Update-DefenderPreferences
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -IsClearTaskName $true


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -EventMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -IsClearTaskName $true
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -EventMessage "Start to install Windows gmsa package. WindowsGmsaPackageUrl: $global:WindowsGmsaPackageUrl"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -IsClearTaskName $true
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallCalico" -EventMessage "Start calico installation. WindowsCalicoPackageURL: $global:WindowsCalicoPackageURL"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallCalico" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -EventMessage "Start to install GPU driver. ConfigGPUDriverIfNeeded: $global:ConfigGPUDriverIfNeeded, GpuDriverURL: $global:GpuDriverURL"
    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -IsClearTaskName $true

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -EventMessage "Start to enable Guest VM Logs. LogGeneratorIntervalInMinutes: $LogGeneratorIntervalInMinutes"
    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -IsClearTaskName $true

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -EventMessage "Start NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -IsClearTaskName $true

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    $cseFormattedEndTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
    $eventsFileName=[DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()

    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    $messageString="ExitCode: $global:ExitCode, ExecutionDuration: $ExecutionDuration, FinalTask: $global:EventTaskName";
    $eventJson=@"
    {
        "Timestamp": "$cseFormattedStartTime",
        "OperationId": "$global:OperationId",
        "Version": "1.10",
        "TaskName": "AKS.WindowsCSE.cse_start",
        "EventLevel": "Informational",
        "Message": "$messageString",
        "EventPid": "0",
        "EventTid": "0"
}
"@
    echo $eventJson | Set-Content ${global:EventsLoggingDir}${eventsFileName}.json

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
