<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$cseFormattedStartTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "subnet2"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-07752737"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "172.17.0.0/24"
$global:KubeServiceCIDR = "172.17.255.0/24"
$global:VNetCIDR = "172.17.0.0/16"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=172.17.255.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("false");
$global:CsiProxyUrl = "";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.37.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -EventMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl"  -IsClearTaskName $true

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -EventMessage "Start to install OpenSSH"
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -EventMessage "Start to apply telemetry data setting. WindowsTelemetryGUID: $global:WindowsTelemetryGUID"
    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -EventMessage "Start to resize os drive if possible"
    Write-Log "Resize os drive if possible"
    Resize-OSDrive
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -EventMessage "Start to initialize data disks"
    Write-Log "Initialize data disks"
    Initialize-DataDisks
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -EventMessage "Start to create required data directories as needed"
    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -EventMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -EventMessage "Start to write KubeCluster Config. WindowsPauseImageURL: $global:WindowsPauseImageURL"
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -IsClearTaskName $true    

    Write-Log "Download kubelet binaries and unzip"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -EventMessage "Start to download kubelet binaries and unzip. KubeBinariesPackageSASURL: $global:KubeBinariesPackageSASURL"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -IsClearTaskName $true

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.OverwriteKubeBinaries" -EventMessage "Start to overwrite kube node binaries"
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.OverwirteKubeBinaries" -IsClearTaskName $true
    }

    
    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -EventMessage "Start to install ContainerD based on kubernetes version. ContainerdUrl: $global:ContainerdUrl, KubernetesVersion: $global:KubeBinariesVersion"
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -EventMessage "Start to retag images for Azure China Cloud"
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -IsClearTaskName $true

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -EventMessage "Start to write Azure Cloud Provider Config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -IsClearTaskName $true

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteCACert" -EventMessage "Start to write CA certifacte"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteCACert" -IsClearTaskName $true

    if ($global:EnableCsiProxy) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -EventMessage "Start Csi proxy service. CsiProxyUrl: $global:CsiProxyUrl"
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -IsClearTaskName $true
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -EventMessage "Start to write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -IsClearTaskName $true

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -EventMessage "Start to write kube config"
    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -IsClearTaskName $true

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -EventMessage "Start hosts config agent"
        New-HostsConfigService
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -IsClearTaskName $true
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Logs-To-Start-Event "ASK.WindowsCSE.GetAndImportHNSModule" -EventMessage "Start to get and import hns module. NetworkPlugin: $global:NetworkPlugin"
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    Logs-To-End-Event "AKS.WindowsCSE.GetAndImportHNSModule" -IsClearTaskName $true

    Write-Log "Installing Azure VNet plugins"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -EventMessage "Start to install Azure VNet plugins. VnetCNIPluginsURL: $global:VNetCNIPluginsURL"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -EventMessage "Start to set Azure CNI config. IsDualStackEnabled: $global:IsDualStackEnabled, IsAzureCNIOverlayEnabled: $global:IsAzureCNIOverlayEnabled, IsDisableWindowsOutboundNat: $global:IsDisableWindowsOutboundNat"
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -IsClearTaskName $true

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -EventMessage "Start to generate Azure Stack CNI config"
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -EventMessage "Start to create new external hns network"
    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -EventMessage "Start to install kubernetes services"
    Install-KubernetesServices `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -IsClearTaskName $true

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetExplorer" -EventMessage "Start to disable Internet Explorer compat mode and set homepage"
    Set-Explorer
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetExplorer" -IsClearTaskName $true

    Write-Log "Adjust pagefile size"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -EventMessage "Start to adjust pagefile size"
    Adjust-PageFileSize
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -IsClearTaskName $true

    Write-Log "Start preProvisioning script"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -EventMessage "Start preProvisioning script"
    
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -IsClearTaskName $true

    Write-Log "Update service failure actions"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -EventMessage "Staret to update service failure actions"
    Update-ServiceFailureActions
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -EventMessage "Start to adjust dynamic port range"
    Adjust-DynamicPortRange
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -EventMessage "Start to register logs cleanup script task"
    Register-LogsCleanupScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -EventMessage "Start to register node reset script task. HNSRemediatorIntervalInMinutes: $global:HNSRemediatorIntervalInMinutes"
    Register-NodeResetScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -EventMessage "Start to update defender preferences"
    Update-DefenderPreferences
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -IsClearTaskName $true


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -EventMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -IsClearTaskName $true
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -EventMessage "Start to install Windows gmsa package. WindowsGmsaPackageUrl: $global:WindowsGmsaPackageUrl"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -IsClearTaskName $true
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallCalico" -EventMessage "Start calico installation. WindowsCalicoPackageURL: $global:WindowsCalicoPackageURL"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallCalico" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -EventMessage "Start to install GPU driver. ConfigGPUDriverIfNeeded: $global:ConfigGPUDriverIfNeeded, GpuDriverURL: $global:GpuDriverURL"
    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -IsClearTaskName $true

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -EventMessage "Start to enable Guest VM Logs. LogGeneratorIntervalInMinutes: $LogGeneratorIntervalInMinutes"
    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -IsClearTaskName $true

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -EventMessage "Start NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -IsClearTaskName $true

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    $cseFormattedEndTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
    $eventsFileName=[DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()

    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    $messageString="ExitCode: $global:ExitCode, ExecutionDuration: $ExecutionDuration, FinalTask: $global:EventTaskName";
    $eventJson=@"
    {
        "Timestamp": "$cseFormattedStartTime",
        "OperationId": "$global:OperationId",
        "Version": "1.10",
        "TaskName": "AKS.WindowsCSE.cse_start",
        "EventLevel": "Informational",
        "Message": "$messageString",
        "EventPid": "0",
        "EventTid": "0"
}
"@
    echo $eventJson | Set-Content ${global:EventsLoggingDir}${eventsFileName}.json

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
