<#
    .SYNOPSIS
        Provisions VM as a Kubernetes agent.

    .DESCRIPTION
        Provisions VM as a Kubernetes agent.

        The parameters passed in are required, and will vary per-deployment.

        Notes on modifying this file:
        - This file extension is PS1, but it is actually used as a template from pkg/engine/template_generator.go
        - All of the lines that have braces in them will be modified. Please do not change them here, change them in the Go sources
        - Single quotes are forbidden, they are reserved to delineate the different members for the ARM template concat() call
        - windowscsehelper.ps1 contains basic util functions. It will be compressed to a zip file and then be converted to base64 encoding
          string and stored in $zippedFiles. Reason: This script is a template and has some limitations.
        - All other scripts will be packaged and published in a single package. It will be downloaded in provisioning VM.
          Reason: CustomData has length limitation 87380.
        - ProvisioningScriptsPackage contains scripts to start kubelet, kubeproxy, etc. The source is https://github.com/Azure/aks-engine/tree/master/staging/provisioning/windows
#>
[CmdletBinding(DefaultParameterSetName="Standard")]
param(
    [string]
    [ValidateNotNullOrEmpty()]
    $MasterIP,

    [parameter()]
    [ValidateNotNullOrEmpty()]
    $KubeDnsServiceIp,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $MasterFQDNPrefix,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $Location,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AgentKey,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientId,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $AADClientSecret, # base64

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $NetworkAPIVersion,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $TargetEnvironment,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $LogFile,

    [parameter(Mandatory=$true)]
    [ValidateNotNullOrEmpty()]
    $CSEResultFilePath,

    [string]
    $UserAssignedClientID
)
# Do not parse the start time from $LogFile to simplify the logic
$StartTime=Get-Date
$cseFormattedStartTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
$global:ExitCode=0
$global:ErrorMessage=""

# These globals will not change between nodes in the same cluster, so they are not
# passed as powershell parameters

## SSH public keys to add to authorized_keys
$global:SSHKeys = @( "testsshkey" )

## Certificates generated by aks-engine
$global:CACertificate = ""
$global:AgentCertificate = ""

## Download sources provided by aks-engine
$global:KubeBinariesPackageSASURL = "https://acs-mirror.azureedge.net/kubernetes/v1.19.0/windowszip/v1.19.0-1int.zip"
$global:WindowsKubeBinariesURL = ""
$global:KubeBinariesVersion = "1.19.0"
$global:ContainerdUrl = "https://k8swin.blob.core.windows.net/k8s-windows/containerd/containerplat-aks-test-0.0.8.zip"
$global:ContainerdSdnPluginUrl = ""

## Docker Version
$global:DockerVersion = "20.10.9"

## ContainerD Usage
$global:DefaultContainerdWindowsSandboxIsolation = "process"
$global:ContainerdWindowsRuntimeHandlers = ""

## VM configuration passed by Azure
$global:WindowsTelemetryGUID = "fb801154-36b9-41bc-89c2-f4d4f05472b0"

$global:TenantId = "tenantID"

$global:SubscriptionId = "subID"
$global:ResourceGroup = "resourceGroupName"
$global:VmType = "vmss"
$global:SubnetName = "aks-subnet"
# NOTE: MasterSubnet is still referenced by `kubeletstart.ps1` and `windowsnodereset.ps1`
# for case of Kubenet
$global:MasterSubnet = ""
$global:SecurityGroupName = "aks-agentpool-36873793-nsg"
$global:VNetName = "aks-vnet-36873793"
$global:RouteTableName = "aks-agentpool-36873793-routetable"
$global:PrimaryAvailabilitySetName = ""
$global:PrimaryScaleSetName = "akswpool2"

$global:KubeClusterCIDR = "10.240.0.0/16"
$global:KubeServiceCIDR = "10.0.0.0/16"
$global:VNetCIDR = "10.0.0.0/8"

$global:KubeletNodeLabels = "agentpool=wpool2,kubernetes.azure.com/agentpool=wpool2,kubernetes.azure.com/node-image-version=AKSWindows-2019-17763.1577.201111"

$global:KubeletConfigArgs = @( "--address=0.0.0.0", "--anonymous-auth=false", "--authentication-token-webhook=true", "--authorization-mode=Webhook", "--azure-container-registry-config=c:\k\azure.json", "--cgroups-per-qos=false", "--client-ca-file=c:\k\ca.crt", "--cloud-config=c:\k\azure.json", "--cloud-provider=azure", "--cluster-dns=10.0.0.10", "--cluster-domain=cluster.local", "--enforce-node-allocatable=", "--event-qps=0", "--eviction-hard=", "--feature-gates=DynamicKubeletConfig=false,RotateKubeletServerCertificate=true", "--hairpin-mode=promiscuous-bridge", "--image-gc-high-threshold=85", "--image-gc-low-threshold=80", "--keep-terminated-pod-volumes=false", "--kube-reserved=cpu=100m,memory=1843Mi", "--kubeconfig=c:\k\config", "--max-pods=30", "--network-plugin=cni", "--node-status-update-frequency=10s", "--pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:3.9", "--pod-max-pids=-1", "--read-only-port=0", "--resolv-conf=""", "--rotate-certificates=false", "--streaming-connection-idle-timeout=4h", "--system-reserved=memory=2Gi", "--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256" )
$global:KubeproxyConfigArgs = @( "--metrics-bind-address=0.0.0.0:10249" )

$global:KubeproxyFeatureGates = @( "WinDSR=true", "WinOverlay=false" )

$global:UseManagedIdentityExtension = "false"
$global:UseInstanceMetadata = "true"

$global:LoadBalancerSku = "Standard"
$global:ExcludeMasterFromStandardLB = "true"

$global:PrivateEgressProxyAddress = ""

# Windows defaults, not changed by aks-engine
$global:CacheDir = "c:\akse-cache"
$global:KubeDir = "c:\k"
$global:HNSModule = [Io.path]::Combine("$global:KubeDir", "hns.v2.psm1")

$global:KubeDnsSearchPath = "svc.cluster.local"

$global:CNIPath = [Io.path]::Combine("$global:KubeDir", "cni")
$global:NetworkMode = "L2Bridge"
$global:CNIConfig = [Io.path]::Combine($global:CNIPath, "config", "`$global:NetworkMode.conf")
$global:CNIConfigPath = [Io.path]::Combine("$global:CNIPath", "config")


$global:AzureCNIDir = [Io.path]::Combine("$global:KubeDir", "azurecni")
$global:AzureCNIBinDir = [Io.path]::Combine("$global:AzureCNIDir", "bin")
$global:AzureCNIConfDir = [Io.path]::Combine("$global:AzureCNIDir", "netconf")

# Azure cni configuration
# $global:NetworkPolicy = "" # BUG: unused
$global:NetworkPlugin = "azure"
$global:VNetCNIPluginsURL = "https://acs-mirror.azureedge.net/azure-cni/v1.1.3/binaries/azure-vnet-cni-singletenancy-windows-amd64-v1.1.3.zip"
$global:IsDualStackEnabled = $false
$global:IsAzureCNIOverlayEnabled = $false

# CSI Proxy settings
$global:EnableCsiProxy = [System.Convert]::ToBoolean("true");
$global:CsiProxyUrl = "https://acs-mirror.azureedge.net/csi-proxy/v0.1.0/binaries/csi-proxy.tar.gz";

# Hosts Config Agent settings
$global:EnableHostsConfigAgent = [System.Convert]::ToBoolean("false");

# These scripts are used by cse
$global:CSEScriptsPackageUrl = "";

# The windows nvidia gpu driver related url is used by windows cse
$global:GpuDriverURL = "";

# PauseImage
$global:WindowsPauseImageURL = "mcr.microsoft.com/oss/kubernetes/pause:1.4.0";
$global:AlwaysPullWindowsPauseImage = [System.Convert]::ToBoolean("false");

# Calico
$global:WindowsCalicoPackageURL = "";

## GPU install
$global:ConfigGPUDriverIfNeeded = [System.Convert]::ToBoolean("true");

# GMSA
$global:WindowsGmsaPackageUrl = "";

# TLS Bootstrap Token
$global:TLSBootstrapToken = ""

# Disable OutBoundNAT in Azure CNI configuration
$global:IsDisableWindowsOutboundNat = [System.Convert]::ToBoolean("false");

# Base64 representation of ZIP archive
$zippedFiles = "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"

$global:KubeClusterConfigPath = "c:\k\kubeclusterconfig.json"
$fipsEnabled = [System.Convert]::ToBoolean("false")

# HNS remediator
$global:HNSRemediatorIntervalInMinutes = [System.Convert]::ToUInt32("0");

# Log generator
$global:LogGeneratorIntervalInMinutes = [System.Convert]::ToUInt32("0");

$global:EnableIncreaseDynamicPortRange = $false

$global:RebootNeeded = $false

# Extract cse helper script from ZIP
[io.file]::WriteAllBytes("scripts.zip", [System.Convert]::FromBase64String($zippedFiles))
Expand-Archive scripts.zip -DestinationPath "C:\\AzureData\\"

# Dot-source windowscsehelper.ps1 with functions that are called in this script
. c:\AzureData\windows\windowscsehelper.ps1
# util functions only can be used after this line, for example, Write-Log

$global:OperationId = New-Guid

try
{
    Write-Log ".\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AADClientId $AADClientId -NetworkAPIVersion $NetworkAPIVersion -TargetEnvironment $TargetEnvironment"

    # Exit early if the script has been executed
    if (Test-Path -Path $CSEResultFilePath -PathType Leaf) {
        Write-Log "The script has been executed before, will exit without doing anything."
        return
    }

    # This involes using proxy, log the config before fetching packages
    Write-Log "private egress proxy address is '$global:PrivateEgressProxyAddress'"
    # TODO update to use proxy

    $WindowsCSEScriptsPackage = "aks-windows-cse-scripts-v0.0.37.zip"
    Write-Log "CSEScriptsPackageUrl is $global:CSEScriptsPackageUrl"
    Write-Log "WindowsCSEScriptsPackage is $WindowsCSEScriptsPackage"
    # Old AKS RP sets the full URL (https://acs-mirror.azureedge.net/aks/windows/cse/aks-windows-cse-scripts-v0.0.11.zip) in CSEScriptsPackageUrl
    # but it is better to set the CSE package version in Windows CSE in AgentBaker
    # since most changes in CSE package also need the change in Windows CSE in AgentBaker
    # In future, AKS RP only sets the endpoint with the pacakge name, for example, https://acs-mirror.azureedge.net/aks/windows/cse/
    if ($global:CSEScriptsPackageUrl.EndsWith("/")) {
        $global:CSEScriptsPackageUrl = $global:CSEScriptsPackageUrl + $WindowsCSEScriptsPackage
        Write-Log "CSEScriptsPackageUrl is set to $global:CSEScriptsPackageUrl"
    }

    # Download CSE function scripts
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl" -EventMessage "Start to get CSE scripts. CSEScriptsPackageUrl: $global:CSEScriptsPackageUrl"
    Write-Log "Getting CSE scripts"
    $tempfile = 'c:\csescripts.zip'
    DownloadFileOverHttp -Url $global:CSEScriptsPackageUrl -DestinationPath $tempfile -ExitCode $global:WINDOWS_CSE_ERROR_DOWNLOAD_CSE_PACKAGE
    Expand-Archive $tempfile -DestinationPath "C:\\AzureData\\windows"
    Remove-Item -Path $tempfile -Force
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadAndExpandCSEScriptPackageUrl"  -IsClearTaskName $true

    # Dot-source cse scripts with functions that are called in this script
    . c:\AzureData\windows\azurecnifunc.ps1
    . c:\AzureData\windows\calicofunc.ps1
    . c:\AzureData\windows\configfunc.ps1
    . c:\AzureData\windows\containerdfunc.ps1
    . c:\AzureData\windows\kubeletfunc.ps1
    . c:\AzureData\windows\kubernetesfunc.ps1
    . c:\AzureData\windows\nvidiagpudriverfunc.ps1

    # Install OpenSSH if SSH enabled
    $sshEnabled = [System.Convert]::ToBoolean("true")

    if ( $sshEnabled ) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -EventMessage "Start to install OpenSSH"
        Write-Log "Install OpenSSH"
        Install-OpenSSH -SSHKeys $SSHKeys
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallOpenSSH" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -EventMessage "Start to apply telemetry data setting. WindowsTelemetryGUID: $global:WindowsTelemetryGUID"
    Write-Log "Apply telemetry data setting"
    Set-TelemetrySetting -WindowsTelemetryGUID $global:WindowsTelemetryGUID
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetTelemetrySetting" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -EventMessage "Start to resize os drive if possible"
    Write-Log "Resize os drive if possible"
    Resize-OSDrive
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.ResizeOSDrive" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -EventMessage "Start to initialize data disks"
    Write-Log "Initialize data disks"
    Initialize-DataDisks
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDisks" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -EventMessage "Start to create required data directories as needed"
    Write-Log "Create required data directories as needed"
    Initialize-DataDirectories
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InitializeDataDirectories" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -EventMessage "Start to get provisioning scripts and log collection scripts"
    Create-Directory -FullPath "c:\k"
    Write-Log "Remove `"NT AUTHORITY\Authenticated Users`" write permissions on files in c:\k"
    icacls.exe "c:\k" /inheritance:r
    icacls.exe "c:\k" /grant:r SYSTEM:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Administrators:`(OI`)`(CI`)`(F`)
    icacls.exe "c:\k" /grant:r BUILTIN\Users:`(OI`)`(CI`)`(RX`)
    Write-Log "c:\k permissions: "
    icacls.exe "c:\k"
    Get-ProvisioningScripts
    Get-LogCollectionScripts
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.GetProvisioningAndLogCollectionScripts" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -EventMessage "Start to write KubeCluster Config. WindowsPauseImageURL: $global:WindowsPauseImageURL"
    Write-KubeClusterConfig -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeClusterConfig" -IsClearTaskName $true    

    Write-Log "Download kubelet binaries and unzip"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -EventMessage "Start to download kubelet binaries and unzip. KubeBinariesPackageSASURL: $global:KubeBinariesPackageSASURL"
    Get-KubePackage -KubeBinariesSASURL $global:KubeBinariesPackageSASURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.DownloadKubletBinaries" -IsClearTaskName $true

    # This overwrites the binaries that are downloaded from the custom packge with binaries.
    # The custom package has a few files that are necessary for future steps (nssm.exe)
    # this is a temporary work around to get the binaries until we depreciate
    # custom package and nssm.exe as defined in aks-engine#3851.
    if ($global:WindowsKubeBinariesURL){
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.OverwriteKubeBinaries" -EventMessage "Start to overwrite kube node binaries"
        Write-Log "Overwriting kube node binaries from $global:WindowsKubeBinariesURL"
        Get-KubeBinaries -KubeBinariesURL $global:WindowsKubeBinariesURL
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.OverwirteKubeBinaries" -IsClearTaskName $true
    }

    
    Write-Log "Installing ContainerD"
    $cniBinPath = $global:AzureCNIBinDir
    $cniConfigPath = $global:AzureCNIConfDir
    if ($global:NetworkPlugin -eq "kubenet") {
        $cniBinPath = $global:CNIPath
        $cniConfigPath = $global:CNIConfigPath
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -EventMessage "Start to install ContainerD based on kubernetes version. ContainerdUrl: $global:ContainerdUrl, KubernetesVersion: $global:KubeBinariesVersion"
    Install-Containerd-Based-On-Kubernetes-Version -ContainerdUrl $global:ContainerdUrl -CNIBinDir $cniBinPath -CNIConfDir $cniConfigPath -KubeDir $global:KubeDir -KubernetesVersion $global:KubeBinariesVersion
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallContainerdBasedOnKubernetesVersion" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -EventMessage "Start to retag images for Azure China Cloud"
    Retag-ImagesForAzureChinaCloud -TargetEnvironment $TargetEnvironment
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RetagImagesForAzureChinaCloud" -IsClearTaskName $true

    # For AKSClustomCloud, TargetEnvironment must be set to AzureStackCloud
    Write-Log "Write Azure cloud provider config"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -EventMessage "Start to write Azure Cloud Provider Config"
    Write-AzureConfig `
        -KubeDir $global:KubeDir `
        -AADClientId $AADClientId `
        -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
        -TenantId $global:TenantId `
        -SubscriptionId $global:SubscriptionId `
        -ResourceGroup $global:ResourceGroup `
        -Location $Location `
        -VmType $global:VmType `
        -SubnetName $global:SubnetName `
        -SecurityGroupName $global:SecurityGroupName `
        -VNetName $global:VNetName `
        -RouteTableName $global:RouteTableName `
        -PrimaryAvailabilitySetName $global:PrimaryAvailabilitySetName `
        -PrimaryScaleSetName $global:PrimaryScaleSetName `
        -UseManagedIdentityExtension $global:UseManagedIdentityExtension `
        -UserAssignedClientID $UserAssignedClientID `
        -UseInstanceMetadata $global:UseInstanceMetadata `
        -LoadBalancerSku $global:LoadBalancerSku `
        -ExcludeMasterFromStandardLB $global:ExcludeMasterFromStandardLB `
        -TargetEnvironment $TargetEnvironment 

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteAzureCloudProviderConfig" -IsClearTaskName $true

    # we borrow the logic of AzureStackCloud to achieve AKSCustomCloud. 
    # In case of AKSCustomCloud, customer cloud env will be loaded from azurestackcloud.json 
    

    Write-Log "Write ca root"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteCACert" -EventMessage "Start to write CA certifacte"
    Write-CACert -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteCACert" -IsClearTaskName $true

    if ($global:EnableCsiProxy) {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -EventMessage "Start Csi proxy service. CsiProxyUrl: $global:CsiProxyUrl"
        New-CsiProxyService -CsiProxyPackageUrl $global:CsiProxyUrl -KubeDir $global:KubeDir
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartCsiProxyService" -IsClearTaskName $true
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Write TLS bootstrap kubeconfig"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -EventMessage "Start to write TLS bootstrap kubeconfig"
        Write-BootstrapKubeConfig -CACertificate $global:CACertificate `
            -KubeDir $global:KubeDir `
            -MasterFQDNPrefix $MasterFQDNPrefix `
            -MasterIP $MasterIP `
            -TLSBootstrapToken $global:TLSBootstrapToken
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteBootstrapKubeConfig" -IsClearTaskName $true

        # NOTE: we need kubeconfig to setup calico even if TLS bootstrapping is enabled
        #       This kubeconfig will deleted after calico installation.
        # TODO(hbc): once TLS bootstrap is fully enabled, remove this if block
        Write-Log "Write temporary kube config"
    } else {
        Write-Log "Write kube config"
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -EventMessage "Start to write kube config"
    Write-KubeConfig -CACertificate $global:CACertificate `
        -KubeDir $global:KubeDir `
        -MasterFQDNPrefix $MasterFQDNPrefix `
        -MasterIP $MasterIP `
        -AgentKey $AgentKey `
        -AgentCertificate $global:AgentCertificate
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.WriteKubeConfig" -IsClearTaskName $true

    if ($global:EnableHostsConfigAgent) {
        Write-Log "Starting hosts config agent"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -EventMessage "Start hosts config agent"
        New-HostsConfigService
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartHostConfigService" -IsClearTaskName $true
    }

    Write-Log "Configuring networking with NetworkPlugin:$global:NetworkPlugin"

    # Configure network policy.
    Logs-To-Start-Event "ASK.WindowsCSE.GetAndImportHNSModule" -EventMessage "Start to get and import hns module. NetworkPlugin: $global:NetworkPlugin"
    Get-HnsPsm1 -HNSModule $global:HNSModule
    Import-Module $global:HNSModule
    Logs-To-End-Event "AKS.WindowsCSE.GetAndImportHNSModule" -IsClearTaskName $true

    Write-Log "Installing Azure VNet plugins"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -EventMessage "Start to install Azure VNet plugins. VnetCNIPluginsURL: $global:VNetCNIPluginsURL"
    Install-VnetPlugins -AzureCNIConfDir $global:AzureCNIConfDir `
        -AzureCNIBinDir $global:AzureCNIBinDir `
        -VNetCNIPluginsURL $global:VNetCNIPluginsURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallVnetPlugins" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -EventMessage "Start to set Azure CNI config. IsDualStackEnabled: $global:IsDualStackEnabled, IsAzureCNIOverlayEnabled: $global:IsAzureCNIOverlayEnabled, IsDisableWindowsOutboundNat: $global:IsDisableWindowsOutboundNat"
    Set-AzureCNIConfig -AzureCNIConfDir $global:AzureCNIConfDir `
        -KubeDnsSearchPath $global:KubeDnsSearchPath `
        -KubeClusterCIDR $global:KubeClusterCIDR `
        -KubeServiceCIDR $global:KubeServiceCIDR `
        -VNetCIDR $global:VNetCIDR `
        -IsDualStackEnabled $global:IsDualStackEnabled `
        -IsAzureCNIOverlayEnabled $global:IsAzureCNIOverlayEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetAzureCNIConfig" -IsClearTaskName $true

    if ($TargetEnvironment -ieq "AzureStackCloud") {
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -EventMessage "Start to generate Azure Stack CNI config"
        GenerateAzureStackCNIConfig `
            -TenantId $global:TenantId `
            -SubscriptionId $global:SubscriptionId `
            -ResourceGroup $global:ResourceGroup `
            -AADClientId $AADClientId `
            -KubeDir $global:KubeDir `
            -AADClientSecret $([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($AADClientSecret))) `
            -NetworkAPIVersion $NetworkAPIVersion `
            -AzureEnvironmentFilePath $([io.path]::Combine($global:KubeDir, "azurestackcloud.json")) `
            -IdentitySystem "azure_ad"
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.GenerateAzureStackCNIConfig" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -EventMessage "Start to create new external hns network"
    New-ExternalHnsNetwork -IsDualStackEnabled $global:IsDualStackEnabled
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.NewExternalHnsNetwork" -IsClearTaskName $true

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -EventMessage "Start to install kubernetes services"
    Install-KubernetesServices `
        -KubeDir $global:KubeDir
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallKubernetesServices" -IsClearTaskName $true

    Write-Log "Disable Internet Explorer compat mode and set homepage"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.SetExplorer" -EventMessage "Start to disable Internet Explorer compat mode and set homepage"
    Set-Explorer
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.SetExplorer" -IsClearTaskName $true

    Write-Log "Adjust pagefile size"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -EventMessage "Start to adjust pagefile size"
    Adjust-PageFileSize
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustPageFileSize" -IsClearTaskName $true

    Write-Log "Start preProvisioning script"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -EventMessage "Start preProvisioning script"
    
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.PreprovisionExtension" -IsClearTaskName $true

    Write-Log "Update service failure actions"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -EventMessage "Staret to update service failure actions"
    Update-ServiceFailureActions
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateServiceFailureActions" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -EventMessage "Start to adjust dynamic port range"
    Adjust-DynamicPortRange
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.AdjustDynamicPortRange" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -EventMessage "Start to register logs cleanup script task"
    Register-LogsCleanupScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterLogsCleanupScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -EventMessage "Start to register node reset script task. HNSRemediatorIntervalInMinutes: $global:HNSRemediatorIntervalInMinutes"
    Register-NodeResetScriptTask
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.RegisterNodeResetScriptTask" -IsClearTaskName $true
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -EventMessage "Start to update defender preferences"
    Update-DefenderPreferences
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.UpdateDefenderPreferences" -IsClearTaskName $true


    $windowsVersion = Get-WindowsVersion
    if ($windowsVersion -ne "1809") {
        Write-Log "Skip secure TLS protocols for Windows version: $windowsVersion"
    } else {
        Write-Log "Enable secure TLS protocols"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -EventMessage "Start to enable secure TLS protocols"
        try {
            . C:\k\windowssecuretls.ps1
            Enable-SecureTls
        }
        catch {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_ENABLE_SECURE_TLS -ErrorMessage $_
        }
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableSecureTLS" -IsClearTaskName $true
    }

    Enable-FIPSMode -FipsEnabled $fipsEnabled
    if ($global:WindowsGmsaPackageUrl) {
        Write-Log "Start to install Windows gmsa package"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -EventMessage "Start to install Windows gmsa package. WindowsGmsaPackageUrl: $global:WindowsGmsaPackageUrl"
        Install-GmsaPlugin -GmsaPackageUrl $global:WindowsGmsaPackageUrl
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGmsaPlugin" -IsClearTaskName $true
    }

    Check-APIServerConnectivity -MasterIP $MasterIP

    if ($global:WindowsCalicoPackageURL) {
        Write-Log "Start calico installation"
        Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallCalico" -EventMessage "Start calico installation. WindowsCalicoPackageURL: $global:WindowsCalicoPackageURL"
        Start-InstallCalico -RootDir "c:\" -KubeServiceCIDR $global:KubeServiceCIDR -KubeDnsServiceIp $KubeDnsServiceIp
        Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallCalico" -IsClearTaskName $true
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -EventMessage "Start to install GPU driver. ConfigGPUDriverIfNeeded: $global:ConfigGPUDriverIfNeeded, GpuDriverURL: $global:GpuDriverURL"
    Start-InstallGPUDriver -EnableInstall $global:ConfigGPUDriverIfNeeded -GpuDriverURL $global:GpuDriverURL
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.InstallGPUDriver" -IsClearTaskName $true

    if (Test-Path $CacheDir)
    {
        Write-Log "Removing aks-engine bits cache directory"
        Remove-Item $CacheDir -Recurse -Force
    }

    if ($global:TLSBootstrapToken) {
        Write-Log "Removing temporary kube config"
        $kubeConfigFile = [io.path]::Combine($KubeDir, "config")
        Remove-Item $kubeConfigFile
    }

    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -EventMessage "Start to enable Guest VM Logs. LogGeneratorIntervalInMinutes: $LogGeneratorIntervalInMinutes"
    Enable-GuestVMLogs -IntervalInMinutes $global:LogGeneratorIntervalInMinutes
    Logs-To-End-Event -TaskName "AKS.WindowsCSE.EnableGuestVMLogs" -IsClearTaskName $true

    Write-Log "Setup Complete, starting NodeResetScriptTask to register Winodws node without reboot"
    Logs-To-Start-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -EventMessage "Start NodeResetScriptTask to register Winodws node without reboot"
    Start-ScheduledTask -TaskName "k8s-restart-job"

    $timeout = 180 ##  seconds
    $timer = [Diagnostics.Stopwatch]::StartNew()
    while ((Get-ScheduledTask -TaskName 'k8s-restart-job').State -ne 'Ready') {
        # The task `k8s-restart-job` needs ~8 seconds.
        if ($timer.Elapsed.TotalSeconds -gt $timeout) {
            Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_START_NODE_RESET_SCRIPT_TASK -ErrorMessage "NodeResetScriptTask is not finished after [$($timer.Elapsed.TotalSeconds)] seconds"
        }

        Write-Log -Message "Waiting on NodeResetScriptTask..."
        Start-Sleep -Seconds 3
    }
    $timer.Stop()
    Write-Log -Message "We waited [$($timer.Elapsed.TotalSeconds)] seconds on NodeResetScriptTask"

    Logs-To-End-Event -TaskName "AKS.WindowsCSE.StartScheduledTask" -IsClearTaskName $true

    if ($global:RebootNeeded -eq $true) {
        Postpone-RestartComputer
    }
}
catch
{
    # Set-ExitCode will exit with the specified ExitCode immediately and not be caught by this catch block
    # Ideally all exceptions will be handled and no exception will be thrown.
    Set-ExitCode -ExitCode $global:WINDOWS_CSE_ERROR_UNKNOWN -ErrorMessage $_
}
finally
{
    # Generate CSE result so it can be returned as the CSE response in csecmd.ps1
    $ExecutionDuration=$(New-Timespan -Start $StartTime -End $(Get-Date))
    $cseFormattedEndTime=$(Get-Date -Format "yyyy-MM-dd HH:mm:ss.fff")
    $eventsFileName=[DateTimeOffset]::UtcNow.ToUnixTimeMilliseconds()

    Write-Log "CSE ExecutionDuration: $ExecutionDuration"

    # Windows CSE does not return any error message so we cannot generate below content as the response
    # $JsonString = "ExitCode: `"{0}`", Output: `"{1}`", Error: `"{2}`", ExecDuration: `"{3}`"" -f $global:ExitCode, "", $global:ErrorMessage, $ExecutionDuration.TotalSeconds
    Write-Log "Generate CSE result to $CSEResultFilePath : $global:ExitCode"
    echo $global:ExitCode | Out-File -FilePath $CSEResultFilePath -Encoding utf8

    $messageString="ExitCode: $global:ExitCode, ExecutionDuration: $ExecutionDuration, FinalTask: $global:EventTaskName";
    $eventJson=@"
    {
        "Timestamp": "$cseFormattedStartTime",
        "OperationId": "$global:OperationId",
        "Version": "1.10",
        "TaskName": "AKS.WindowsCSE.cse_start",
        "EventLevel": "Informational",
        "Message": "$messageString",
        "EventPid": "0",
        "EventTid": "0"
}
"@
    echo $eventJson | Set-Content ${global:EventsLoggingDir}${eventsFileName}.json

    # Flush stdout to C:\AzureData\CustomDataSetupScript.log
    [Console]::Out.Flush()

    Upload-GuestVMLogs -ExitCode $global:ExitCode
}
